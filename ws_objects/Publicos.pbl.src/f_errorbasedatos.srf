$PBExportHeader$f_errorbasedatos.srf
global type f_errorbasedatos from function_object
end type

forward prototypes
global function integer f_errorbasedatos (transaction at_trans, string as_mensaje)
end prototypes

global function integer f_errorbasedatos (transaction at_trans, string as_mensaje);/*	Función		:	F_ErroBaseDatos
						Despliegue de Ventana con todos los datos del Error Producido
	Argumentos	:	at_trans		=>	Objeto de Transacción donde se produjo el Error
						as_Mensaje	=>	Título para la ventana de Error (Mensaje)
*/

Str_ErrorBaseDatos	lstr_ErrBD
uo_ErrorBaseDatos	iuo_Error
Integer					li_repsuesta, li_Retorno = 0

If at_trans.sqlcode = 0 Then RETURN 0

iuo_Error	=	Create uo_ErrorBaseDatos

If pos(at_trans.SqlErrText, "Database server not found", 1) > 0 Then
	MessageBox("Atención", "El servidor al que intenta acceder no se encuentra disponible.~r~n" + &
								  "Por favor, comuniqueselo al administrador del sistema e intente mas tarde.", Exclamation!)
	li_Retorno =  1	
ElseIf pos(at_trans.SqlErrText, "Specified database not found", 1) > 0 Then
	MessageBox("Atención", "La base de datos a la que intenta acceder no se encuentra disponible.~r~n" + &
								  "Por favor, comuniqueselo al administrador del sistema e intente mas tarde.", Exclamation!)
	li_Retorno =  1
Else
	lstr_ErrBD.Titulo	=	"Se ha Producido un Error en :~r~n" + as_Mensaje
	lstr_ErrBD.Numero	=	at_trans.SqldbCode
	lstr_ErrBD.Texto	=	at_trans.SqlErrText
	
	as_Mensaje	=	"Se ha Producido un Error en :~r~n" + as_Mensaje + "~r~n~r~n"
	as_Mensaje	+=	"Transaction Error Code~t: " + String (at_trans.SqlCode) + "~r~n"
	as_Mensaje	+=	"Database Error Code~t: " + String (at_trans.SqldbCode) + "~r~n"
	as_Mensaje	+=	"Database Error Text~t~t: " + at_trans.SqlErrText + "~r~n~r~n"
	as_Mensaje	+=	"DBMS~t~t~t: " + at_trans.DBMS + "~r~n"
	as_Mensaje	+=	"Database~t~t~t: " + at_trans.DataBase + "~r~n"
	as_Mensaje	+=	"User ID~t~t~t: " + at_trans.UserId + "~r~n"
	as_Mensaje	+=	"DBParm~t~t~t: " + at_trans.dbParm + "~r~n"
	as_Mensaje	+=	"Login ID~t~t~t: " + at_trans.LogId + "~r~n"
	as_Mensaje	+=	"ServerName~t~t: " + at_trans.ServerName + "~r~n"
	
	If at_trans.AutoCommit Then
		as_Mensaje	+=	"AutoCommit~t~t: True~r~n"
	Else
		as_Mensaje	+=	"AutoCommit~t~t: False~r~n"
	End If
	
	lstr_ErrBD.MensajePantalla	=	as_Mensaje
	OpenWithParm(w_ErrorBaseDatos, lstr_ErrBD)
	li_repsuesta	=	Integer(Message.StringParm)
	
	If li_repsuesta = 1 Then
		as_Mensaje	=	""
		as_Mensaje	=	"Se ha Producido un Error en :~r~n" + as_Mensaje + "~r~n~r~n"
		as_Mensaje	+=	"Transaction Error Code~t: " + String (at_trans.SqlCode) + "~r~n"
		as_Mensaje	+=	"Database Error Code~t: " + String (at_trans.SqldbCode) + "~r~n"
		as_Mensaje	+=	"Database Error Text~t: " + at_trans.SqlErrText + "~r~n~r~n"
		as_Mensaje	+=	"DBMS~t~t~t~t: " + at_trans.DBMS + "~r~n"
		as_Mensaje	+=	"Database~t~t~t: " + at_trans.DataBase + "~r~n"
		as_Mensaje	+=	"User ID~t~t~t: " + at_trans.UserId + "~r~n"
		as_Mensaje	+=	"DBParm~t~t~t: " + at_trans.dbParm + "~r~n"
		as_Mensaje	+=	"Login ID~t~t~t: " + at_trans.LogId + "~r~n"
		as_Mensaje	+=	"ServerName~t~t~t: " + at_trans.ServerName + "~r~n"
	
		If at_trans.AutoCommit Then
			as_Mensaje	+=	"AutoCommit~t~t~t: True~r~n"
		Else
			as_Mensaje	+=	"AutoCommit~t~t~t: False~r~n"
		End If
		
		lstr_ErrBD.mensajecorreo	=	as_mensaje
		OpenWithParm(w_correo_error, lstr_ErrBD)
	End If
	li_Retorno =  1
End If

If li_Retorno <> 0 Then iuo_Error.of_Send(at_trans)

Return li_Retorno
end function

